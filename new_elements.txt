λ                                                      = * lambda - λ...;
ƛ                                                      = * mapping lambda - ƛ...;
¬  (a: any)                                            = not a
∧  (a: any, b: any)                                    = a and b
⟑  (a: any, b: any)                                    = b and a
∨  (a: any, b: any)                                    = a or b
⟇  (a: any, b: any)                                    = b or a
÷  (a: number, b: number)                              = a / b # division
   (a: number, b: string)                              = b split into a even length pieces. There may be an extra part if the string is too long.
   (a: string, b: number)                              = a split into b even length pieces. There may be an extra part if the string is too long.
   (a: string, b: string)                              = a.split_on_first_occurance(b)
   (otherwise)                                         = vectorise
×  (a: number, b: number)                              = a × b # multiply, multiplication, times
   (a: number, b: string)                              = b repeated a times
   (a: string, b: number)                              = a repeated b times
   (a: string, b: string)                              = [char + b for char in a]
   (otherwise)                                         = vectorise
«                                                      = * base-255 compressed string: «...«
<newline>                                              = * NOP # no-op, nothing
»                                                      = * base-255 compressed number: »...»
°                                                      = * function reference - °defined_function_name;
•  (a: number, b: number)                              = log_a(b)
   (a: number, b: string)                              = [char * a for char in b]
   (a: string, b: number)                              = [char * b for char in a]
   (a: string, b: string)                              = a.with_capitalisation_of(b)
   (a: list, b: list)                                  = a molded to the shape of b
   (otherwise)                                         = vectorise
¿  (a: any)                                            = * apply element if a is truthy - <element>¿
⋄  (a: number)                                         = number of prime factors
   (a: string)                                         = * execute as Vyxal
   (a: function)                                       = * call function
   (otherwise)                                         = vectorise
μ                                                      = * last two elements as a single element - <element><element>μ
ξ                                                      = * last three elements as a single element - <element><element><element>ξ
π                                                      = * last four elements as a single element - ....π
